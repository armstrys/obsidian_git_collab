name: Release Obsidian plugin

on:
    push:
        branches: [ main ]

env:
    PLUGIN_NAME: obsidian-git-collab

jobs:
    release:
        runs-on: ubuntu-latest
        steps:
            -   uses: actions/checkout@v4
            -   name: Use Node.js
                uses: actions/setup-node@v4
                with:
                    node-version: 18
                    cache: 'npm'
            -   name: Get version
                id: version
                run: |
                    VERSION=$(node -p "require('./manifest.json').version")
                    echo "version=$VERSION" >> $GITHUB_OUTPUT
                    echo "tag=v$VERSION" >> $GITHUB_OUTPUT
            -   name: Check if release exists
                id: release-check
                run: |
                    if gh release view ${{ steps.version.outputs.tag }} --repo ${{ github.repository }} >/dev/null 2>&1; then
                        echo "exists=true" >> $GITHUB_OUTPUT
                    else
                        echo "exists=false" >> $GITHUB_OUTPUT
                    fi
                env:
                    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                    GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            -   name: Build
                if: steps.release-check.outputs.exists == 'false'
                run: |
                    npm ci
                    npm run build
                    mkdir ${{ env.PLUGIN_NAME }}
                    cp main.js manifest.json styles.css ${{ env.PLUGIN_NAME }}
                    zip -r ${{ env.PLUGIN_NAME }}.zip ${{ env.PLUGIN_NAME }}
            -   name: Create Release
                if: steps.release-check.outputs.exists == 'false'
                run: |
                    gh release create ${{ steps.version.outputs.tag }} \
                        --title "Release ${{ steps.version.outputs.tag }}" \
                        --notes "Automated release for version ${{ steps.version.outputs.version }}" \
                        --repo ${{ github.repository }}
                env:
                    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                    GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            -   name: Upload assets
                if: steps.release-check.outputs.exists == 'false'
                run: |
                    gh release upload ${{ steps.version.outputs.tag }} ${{ env.PLUGIN_NAME }}.zip main.js manifest.json styles.css --repo ${{ github.repository }}
                env:
                    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                    GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
